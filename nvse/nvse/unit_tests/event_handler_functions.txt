begin Function { }

	; === Test NVSE event handler functions ===

	let ref rOnHitUDF = (begin function { ref rFirst, ref rSecond }
		;
	end)


	; ==  No filters
	assert (SetEventHandler "OnHit" rOnHitUDF) == 1
	assert (SetEventHandlerAlt "OnHit" rOnHitUDF) == 0

	let array_var aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (aCallbacks[0][0] == rOnHitUDF)
	assert ( (Ar_Size aCallbacks[0][1]) == 0)

	assert (RemoveEventHandler "OnHit" rOnHitUDF)
	let aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (ar_size aCallbacks) == 0

	; == "first" filter
	assert (SetEventHandler "OnHit" rOnHitUDF "first"::EasyPeteREF)
	assert (TestExpr (SetEventHandlerAlt "OnHit" rOnHitUDF "first"::EasyPeteREF)) == 0   ; string filter keys not allowed

	let aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (aCallbacks[0][0] == rOnHitUDF)
	assert ( (Ar_Size aCallbacks[0][1]) == 1)
	assert ( aCallbacks[0][1]["first"] == EasyPeteREF)

	assert (RemoveEventHandler "OnHit" rOnHitUDF "first"::EasyPeteREF)
	let aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (ar_size aCallbacks) == 0


	; == "second" filter
	assert (SetEventHandler "OnHit" rOnHitUDF "second"::Player)
	assert (TestExpr (SetEventHandlerAlt "OnHit" rOnHitUDF "second"::Player)) == 0

	let aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (aCallbacks[0][0] == rOnHitUDF)
	assert ( (Ar_Size aCallbacks[0][1]) == 1)
	assert ( aCallbacks[0][1]["second"] == Player)

	assert (RemoveEventHandler "OnHit" rOnHitUDF "second"::Player)
	let aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (ar_size aCallbacks) == 0


	; == "first" + "second" filter
	assert (SetEventHandler "OnHit" rOnHitUDF "first"::EasyPeteREF "second"::Player)
	assert (TestExpr (SetEventHandlerAlt "OnHit" rOnHitUDF "first"::EasyPeteREF "second"::Player)) == 0   ; string filter keys not allowed


	let aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (aCallbacks[0][0] == rOnHitUDF)
	assert ( (Ar_Size aCallbacks[0][1]) == 2)
	assert ( aCallbacks[0][1]["first"] == EasyPeteREF )
	assert ( aCallbacks[0][1]["second"] == Player)

	assert (RemoveEventHandler "OnHit" rOnHitUDF "first"::EasyPeteREF "second"::Player)
	let aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (ar_size aCallbacks) == 0

	; == Having all of the above handlers, then removing them all in one RemoveEventHandler call.

	assert (SetEventHandler "OnHit" rOnHitUDF)
	let int iCallback := 0
	let aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (aCallbacks[iCallback][0] == rOnHitUDF)
	assert ( (Ar_Size aCallbacks [iCallback][1]) == 0)

	assert (SetEventHandler "OnHit" rOnHitUDF "first"::EasyPeteREF)
	let iCallback += 1
	let aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (aCallbacks[iCallback][0] == rOnHitUDF)
	assert ( (Ar_Size aCallbacks[iCallback][1]) == 1)
	assert ( aCallbacks[iCallback][1]["first"] == EasyPeteREF)

	assert (SetEventHandler "OnHit" rOnHitUDF "second"::Player)
	let iCallback += 1
	let aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (aCallbacks[iCallback][0] == rOnHitUDF)
	assert ( (Ar_Size aCallbacks[iCallback][1]) == 1)
	assert ( aCallbacks[iCallback][1]["second"] == Player)

	assert (SetEventHandler "OnHit" rOnHitUDF "first"::EasyPeteREF "second"::Player)
	let iCallback += 1
	let aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (aCallbacks [iCallback][0] == rOnHitUDF)
	assert ( (Ar_Size aCallbacks[iCallback][1]) == 2)
	assert ( aCallbacks[iCallback][1]["first"] == EasyPeteREF )
	assert ( aCallbacks[iCallback][1]["second"] == Player)

	; remove all callbacks
	assert (RemoveEventHandler "OnHit" rOnHitUDF)
	let aCallbacks := GetEventHandlers "OnHit" rOnHitUDF
	assert (ar_size aCallbacks) == 0


	; == Begin testing new event filters (using SetEventHandlerAlt)

	int iRan = 0

	; == Test dispatching + type-checking for filters
	ref rTestEventUDF_NoArgsPassed = (begin Function {int iArg, float fArg, array_var aArg, string_var sArg, ref rFormArg, ref rReferenceArg, ref rBaseFormArg }
		assert (iArg == 0)
		assert (fArg == 0)
		assert (aArg == Ar_Null)
		assert (Sv_Length (sArg) == -1) ;invalid str
		assert (rFormArg == 0)
		assert (rReferenceArg == 0)
		assert (rBaseFormArg == 0)
		iRan += 1
	end)

	assert (SetEventHandler "nvseTestEvent" rTestEventUDF_NoArgsPassed)
	assert (DispatchEventAlt "nvseTestEvent" rTestEventUDF_NoArgsPassed)
	assert (iRan == 1)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_NoArgsPassed)

	; Non-string filter keys are not allowed for SetEventHandler.
	assert (TestExpr (SetEventHandler "nvseTestEvent" rTestEventUDF_NoArgsPassed 0::0)) == 0 
	; However, the event handler is still set; the invalid filter was just ignored.
	; This is because some mods may be relying on this behavior.
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_NoArgsPassed)

	; 0::SomeFilter is filtering callingRef, so it expects a reference, not an Int.
	assert (TestExpr (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_NoArgsPassed 0::0)) == 0 
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_NoArgsPassed)) == 0

	ref rNullRef = 0
	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_NoArgsPassed 0::rNullRef)
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_NoArgsPassed)) == 1
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_NoArgsPassed rNullRef)) == 1
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_NoArgsPassed 0)) == 1
	;
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_NoArgsPassed 0::rNullRef)
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_NoArgsPassed)) == 0

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_NoArgsPassed 1::0)
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_NoArgsPassed)) == 1
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_NoArgsPassed 0)) == 1
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_NoArgsPassed 99)) == 0
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_NoArgsPassed 0.5)) == 1
	;
	assert (DispatchEventAlt "nvseTestEvent" rTestEventUDF_NoArgsPassed)
	assert (iRan == 1)	
	iRan = 0
	;
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_NoArgsPassed 1::0)
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_NoArgsPassed)) == 0
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_NoArgsPassed 0)) == 0

	; Trying to dispatch with no handlers.
	assert (DispatchEventAlt "nvseTestEvent" rTestEventUDF_NoArgsPassed)
	assert (iRan == 0)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_NoArgsPassed) == 0  ; Failed to remove any, because there aren't any


	;trying to filter a baseform by a reference
	assert (TestExpr (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_NoArgsPassed 7::EasyPeteREF)) == 0

	; There is no 8th arg to filter
	assert (TestExpr (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_NoArgsPassed 8::0)) == 0


	; == Test dispatching with args passed
	int iArg_Expected = 1
	float fArg_Expected = 2.5
	array_var aArg_Expected = ar_List 1, SunnyREF
	string_var sArg_Expected = "test"
	ref rFormArg_Expected = SunnyREF
	ref rReferenceArg_Expected = Player
	ref rBaseFormArg_Expected = GSEasyPete
	iRan = 0

	ref rTestEventUDF_AllArgsPassed = (begin Function {int iArg, float fArg, array_var aArg, string_var sArg, ref rFormArg, ref rReferenceArg, ref rBaseFormArg }
		assert (GetSelf == EasyPeteREF)
		assert (iArg == iArg_Expected)
		assert (fArg == fArg_Expected)
		assert (aArg == aArg_Expected)
		assert (sArg == sArg_Expected)
		assert (rFormArg == rFormArg_Expected)
		assert (rReferenceArg == rReferenceArg_Expected)
		assert (rBaseFormArg == rBaseFormArg_Expected)
		iRan += 1
	end)

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed) ;unfiltered
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 1)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed)

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 0::EasyPeteREF)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 1)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed  0::EasyPeteREF)


	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 1::1)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 1)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 1::1)

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 1::99)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 0)  ; filter shouldn't be matching
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 1::99)


	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 2::2.5)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 1)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 2::2.5)

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 2::3.99)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 0)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 2::3.99)


	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 3::(Ar_List 1, SunnyREF))
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 1)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 3::(Ar_List 1, SunnyREF))

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 3::(Ar_List 2, SunnyREF))
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 0)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 3::(Ar_List 2, SunnyREF))


	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::"test")
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 1)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::"test")

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::"not a match")
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 0)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::"not a match")


	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 5::SunnyREF)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 1)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 5::SunnyREF)

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 5::Player)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 0)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 5::Player)

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 5::GSSunnySmiles)  ; shouldn't match the refr arg to its baseform
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 0)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 5::GSSunnySmiles)


	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 6::Player)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 1)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 6::Player)

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 6::EasyPeteREF)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 0)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 6::EasyPeteREF)

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 6::(Player.GBO))  ; should match the refr arg to its baseform
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 1)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 6::(Player.GBO))


	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 7::GSEasyPete)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 1)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 7::GSEasyPete)

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 7::GSSunnySmiles)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 0)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 7::GSSunnySmiles)


	; == Test mass-removing handlers with less generic filters.
	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed)
	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 6::Player)
	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 5::SunnyREF)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 3)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed)
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_AllArgsPassed)) == 0

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 6::Player)
	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed)
	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 6::Player 5::SunnyREF)
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 3)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 6::Player)
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_AllArgsPassed)) == 1
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed)
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_AllArgsPassed)) == 0

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::"test")
	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::"test" 5::SunnyREF)
	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::"test" 5::SunnyREF) == 0  ;redundant handler
	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::"test" 5::SunnyREF 3::(ar_List 1, SunnyREF))
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 3)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 3::(ar_List 1, SunnyREF))
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_AllArgsPassed)) == 2  ; handler with 4::"test" and handler with 4::"test" 5::SunnyREF should be left
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 5::SunnyREF)
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_AllArgsPassed)) == 1
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::"test")
	assert (Ar_Size (GetEventHandlers "nvseTestEvent" rTestEventUDF_AllArgsPassed)) == 0


	; == Test array-of-filters filter.
	
	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::(Ar_List "notAMatch", "test"))
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 1)
	iRan = 0

	; Array elements do not all match, so filters don't match.
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::(Ar_List "notAMatch")) == 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::(Ar_List "test")) == 0

	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::(Ar_List "notAMatch", "test"))

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::(Ar_List "notAMatch", "testAlsoNotAMatchtest"))
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 0)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::(Ar_List "notAMatch", "testAlsoNotAMatchtest"))


	; For (string)Maps, the keys are ignored.

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::(Ar_Map "key"::"notAMatch", "key2"::"testAlsoNotAMatchtest"))
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 0)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::(Ar_Map "key"::"notAMatch", "key2"::"testAlsoNotAMatchtest"))

	assert (SetEventHandlerAlt "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::(Ar_Map "key"::"test", "key2"::"testAlsoNotAMatchtest"))
	assert (EasyPeteREF.DispatchEventAlt "nvseTestEvent" iArg_Expected, fArg_Expected, aArg_Expected, sArg_Expected, rFormArg_Expected, rReferenceArg_Expected, rBaseFormArg_Expected)
	assert (iRan == 1)
	iRan = 0
	assert (RemoveEventHandler "nvseTestEvent" rTestEventUDF_AllArgsPassed 4::(Ar_Map "key"::"test", "key2"::"testAlsoNotAMatchtest"))

	; Nested arrays are not fully supported, currently...


	print "Finished running xNVSE Event Handler Unit Tests."

	
	; == Ensure LN events don't throw errors.
	if IsPluginInstalled "JIP NVSE Plugin"
		
		ref rOnCellChangeUDF = (begin function { ref rFirst }
			;
		end)

		assert (SetEventHandler "OnCellEnter" rOnCellChangeUDF "first"::BisonSteve01) != 0
		assert (RemoveEventHandler "OnCellEnter" rOnCellChangeUDF "first"::BisonSteve01) != 0
	
		ref rOnControlDownUDF = (begin function {int iControlCode}
			;
		end)
		
		assert (SetEventHandler "OnControlDown:4" rOnControlDownUDF)
		assert (SetEventHandler "OnControlDown:4" rOnControlDownUDF) == 0  ; duplicate handler
		assert (RemoveEventHandler "OnControlDown:5" rOnControlDownUDF) == 0  ; no handler was set with that filter.
		assert (RemoveEventHandler "OnControlDown:4" rOnControlDownUDF)
		
		; Refuses to set handler if no NumFilter in the string
		assert (RemoveEventHandler "OnControlDown" rOnControlDownUDF) == 0  
		
		; Invalid control codes
		assert (SetEventHandler "OnControlDown:-1" rOnControlDownUDF) == 0  
		assert (SetEventHandler "OnControlDown:28" rOnControlDownUDF) == 0  
		
		; == Test error reporting with LN event (special case)
		; "second" and 2::, 3::, etc. are ignored for LN event dispatching
		; All filter type-checking is also ignored.
		
		; xNVSE doesn't have ownership over these handlers.
		assert (Ar_Size (GetEventHandlers "OnCellEnter" rOnCellChangeUDF)) == -1	; null array
		
		; Will ignore the 5::99 filter, since we can't do out-of-bounds filter checks for LN events.
		assert (SetEventHandlerAlt "OnCellEnter" rOnCellChangeUDF 5::99)	

		; Acts as if "SetEventHandler "OnCellEnter" rOnCellChangeUDF" was called (again!)
		; (LN events ignore "second" filter)
		assert (SetEventHandler "OnCellEnter" rOnCellChangeUDF "second"::BisonSteve01) == 0	
		assert (RemoveEventHandler "OnCellEnter" rOnCellChangeUDF "second"::BisonSteve01)
		assert (SetEventHandler "OnCellEnter" rOnCellChangeUDF "second"::BisonSteve01)
		assert (RemoveEventHandler "OnCellEnter" rOnCellChangeUDF) == 1
		
		assert (SetEventHandler "OnCellEnter" rOnCellChangeUDF "first"::BisonSteve01)
		assert (SetEventHandlerAlt "OnCellEnter" rOnCellChangeUDF 1::BisonSteve01)	== 0	;same thing as above
		assert (RemoveEventHandler "OnCellEnter" rOnCellChangeUDF "first"::BisonSteve01)
		assert (SetEventHandlerAlt "OnCellEnter" rOnCellChangeUDF 1::BisonSteve01)
		assert (SetEventHandler "OnCellEnter" rOnCellChangeUDF "first"::BisonSteve01) == 0	;same thing as above
		
		; Try to remove handler with "first"::BisonSteve01 filter
		; !! Assertion fails, not sure why, but probably just LN event weirdness.
		;assert (RemoveEventHandler "OnCellEnter" rOnCellChangeUDF) == 1  
		
		assert (RemoveEventHandler "OnCellEnter" rOnCellChangeUDF "first"::BisonSteve01) == 1
		assert (RemoveEventHandler "OnCellEnter" rOnCellChangeUDF 1::BisonSteve01) == 0
		assert (RemoveEventHandler "OnCellEnter" rOnCellChangeUDF) == 0
		
		assert (Ar_Size (GetEventHandlers "OnCellEnter" rOnCellChangeUDF)) == -1
		

		print "Finished running xNVSE Event Handler Unit Tests (for LN events)."
	endif


end